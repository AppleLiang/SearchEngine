package ir.assignments.one.d;

import ir.assignments.one.a.Frequency;
import ir.assignments.one.a.Utilities;
import ir.assignments.one.b.WordFrequencyCounter;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class PalindromeFrequencyCounter {
	/**
	 * This class should not be instantiated.
	 */
	private PalindromeFrequencyCounter() {}
	
	/**
	 * Takes the input list of words and processes it, returning a list
	 * of {@link Frequency}s.
	 * 
	 * This method expects a list of lowercase alphanumeric strings.
	 * If the input list is null, an empty list is returned.
	 * 
	 * There is one frequency in the output list for every 
	 * unique palindrome found in the original list. The frequency of each palindrome
	 * is equal to the number of times that palindrome occurs in the original list.
	 * 
	 * Palindromes can span sequential words in the input list.
	 * 
	 * The returned list is ordered by decreasing size, with tied palindromes sorted
	 * by frequency and further tied palindromes sorted alphabetically. 
	 * 
	 * The original list is not modified.
	 * 
	 * Example:
	 * 
	 * Given the input list of strings 
	 * ["do", "geese", "see", "god", "abba", "bat", "tab"]
	 * 
	 * The output list of palindromes should be 
	 * ["do geese see god:1", "bat tab:1", "abba:1"]
	 *  
	 * @param words A list of words.
	 * @return A list of palindrome frequencies, ordered by decreasing frequency.
	 */
	private static String all = new String();
	// method to find all palindromes
	private static ArrayList<String> findPalindrome(ArrayList<String>words)
	{
		// combine all the words to a big string
		for(int i = 0; i < words.size(); i++)
		{
			all = all + " " + words.get(i);
		}
		all += " ";
		ArrayList<String> palindromes = new ArrayList<String>();
		int l = all.length();
		// the odd strings
		for (int j = 0; j < l; j++)
		{
			int left = j - 1;
			int right = j + 1;
			while(left >= 0 && right <= l - 1)
			{
				if(all.charAt(left) == ' ' && all.charAt(right) == ' ')
				{
					palindromes.add(all.substring(left + 1, right));
					left--;
					right++;
				}
				else if(all.charAt(left) == ' ' && all.charAt(right) != ' ')
				{
					left--;
				}
				else if(all.charAt(right) == ' ' && all.charAt(left) != ' ')
				{
					right++;
				}
				else if(all.charAt(right) == all.charAt(left))
				{
					left--;
					right++;
				}
				else break;
			}
		}
		// the even strings
		for (int k = 0; k < l - 1; k++)
		{
			int m = k + 1;
			int left = k - 1;
			int right = m + 1;
			if(all.charAt(k) == all.charAt(m))
			{
				while(left >= 0 && right <= l - 1)
				{
					if(all.charAt(left) == ' ' && all.charAt(right) == ' ')
					{
						palindromes.add(all.substring(left + 1, right));
						left--;
						right++;
					}
					else if(all.charAt(left) == ' ' && all.charAt(right) != ' ')
					{
						left--;
					}
					else if(all.charAt(right) == ' ' && all.charAt(left) != ' ')
					{
						right++;
					}
					else if(all.charAt(right) == all.charAt(left))
					{
						left--;
						right++;
					}
					else break;
				}
			}
		}
		return palindromes;
	}
	private static ArrayList<Frequency> sortPalindromeFrequencies(ArrayList<String> words)
	{
		// count every word's frequency using hashmap
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		for(int i = 0; i < words.size(); i++)
		{
			String temp = words.get(i);
			if(map.containsKey(temp))
			{
				int f = map.get(temp);
				f++;
				map.put(temp, f);
			}
			else
			{
				map.put(temp, 1);
			}
		}
		// put the result in an arraylist
		ArrayList<Frequency> fre = new ArrayList<Frequency>();
		for(String s : map.keySet())
		{
			Frequency f = new Frequency(s, map.get(s));
			fre.add(f);
		}
		Collections.sort(fre, new Comparator<Frequency>()
		{
			public int compare(Frequency a, Frequency b)
			{
				String str1 = a.getText();
				String str2 = b.getText();
				str1 = str1.replaceAll(" ", "");
				str2 = str2.replaceAll(" ", "");
				if(str1.length() < str2.length())
				{
					return -1;
				}
				else if(str1.length() > str2.length())
				{
					return 1;
				}
				else
				{
					if (a.getFrequency() < b.getFrequency())
					{
						return -1;
					}
					else if(a.getFrequency() > b.getFrequency())
					{
						return 1;
					}
					else
					{
						if(a.getText().compareTo(b.getText()) < 0)
						{
							return 1;
						}
						else if(a.getText().compareTo(b.getText()) > 0)
						{
							return -1;
						}
						else return 0;
					}
				}		
				}
		});
		Collections.reverse(fre);
		return fre;
	}
	private static List<Frequency> computePalindromeFrequencies(ArrayList<String> words) {
		// TODO Write body!
		// You will likely want to create helper methods / classes to help implement this functionality
		if (words.size() == 0)
		{
			return null;
		}
		ArrayList<String> palindromes = findPalindrome(words);
		ArrayList<Frequency> fre = new ArrayList<Frequency>();
		fre = (ArrayList<Frequency>) PalindromeFrequencyCounter.sortPalindromeFrequencies(palindromes);
		return fre;
	}
	
	/**
	 * Runs the 2-gram counter. The input should be the path to a text file.
	 * 
	 * @param args The first element should contain the path to a text file.
	 */
	public static void main(String[] args) {
		File file = new File("E:/a.txt");
		ArrayList<String> words = Utilities.tokenizeFile(file);
		List<Frequency> frequencies = computePalindromeFrequencies(words);
		Utilities.printPalindromes(frequencies);
	}
}
